import os
import glob
import sys
import re
import ROOT
from ROOT import gROOT 
import numpy as np

m_ctau_eff_time_s = [
[0.50,    10.00, 4.61e-03, 14.66],
[0.60,    10.00, 4.64e-03, 16.62],
[0.70,    10.00, 4.58e-03, 15.95],
[0.80,    10.00, 4.52e-03, 17.60],
[0.90,    10.00, 4.51e-03, 16.51],
[1.00,    10.00, 4.50e-03, 18.01],
[1.02,    10.00, 4.51e-03, 17.33],
[1.04,    10.00, 4.48e-03, 17.19],
[1.06,    10.00, 4.49e-03, 17.15],
[1.08,    10.00, 4.42e-03, 18.00],
[1.10,    10.00, 4.48e-03, 18.78],
[1.12,    10.00, 4.44e-03, 17.71],
[1.14,    10.00, 4.38e-03, 16.68],
[1.16,    10.00, 4.33e-03, 18.09],
[1.18,    10.00, 4.34e-03, 17.95],
[1.20,    10.00, 4.28e-03, 18.31],
[1.22,    10.00, 4.35e-03, 18.36],
[1.24,    10.00, 4.29e-03, 19.09],
[1.26,    10.00, 4.28e-03, 18.72],
[1.28,    10.00, 4.31e-03, 17.84],
[1.30,    10.00, 4.25e-03, 19.45],
[1.32,    10.00, 4.28e-03, 18.87],
[1.34,    10.00, 4.31e-03, 18.68],
[1.36,    10.00, 4.20e-03, 19.82],
[1.38,    10.00, 4.17e-03, 19.76],
[1.40,    10.00, 4.21e-03, 19.51],
[1.42,    10.00, 4.22e-03, 19.53],
[1.44,    10.00, 4.15e-03, 19.52],
[1.46,    10.00, 4.17e-03, 18.98],
[1.48,    10.00, 4.13e-03, 19.74],
[1.50,    10.00, 4.15e-03, 19.70],
[1.53,    10.00, 4.11e-03, 20.51],
[1.56,    10.00, 4.10e-03, 19.91],
[1.59,    10.00, 4.12e-03, 19.72],
[1.62,    10.00, 4.15e-03, 19.30],
[1.65,    10.00, 4.18e-03, 21.05],
[1.68,    10.00, 4.09e-03, 21.29],
[1.71,    10.00, 4.06e-03, 21.04],
[1.74,    10.00, 4.08e-03, 20.45],
[1.77,    10.00, 4.02e-03, 20.76],
[1.80,    10.00, 3.95e-03, 21.18],
[1.83,    10.00, 3.95e-03, 21.46],
[1.86,    10.00, 3.93e-03, 21.54],
[1.89,    10.00, 3.90e-03, 20.87],
[1.92,    10.00, 3.86e-03, 21.83],
[1.95,    10.00, 3.88e-03, 21.69],
[1.98,    10.00, 3.92e-03, 22.18],
[2.00,    10.00, 3.86e-03, 22.22],
[2.05,    10.00, 3.91e-03, 21.32],
[2.10,    10.00, 4.03e-03, 20.52],
[2.15,    10.00, 4.01e-03, 21.14],
[2.20,    10.00, 4.05e-03, 20.63],
[2.25,    10.00, 4.12e-03, 19.86],
[2.30,    10.00, 4.09e-03, 20.33],
[2.35,    10.00, 4.23e-03, 20.68],
[2.40,    10.00, 4.21e-03, 20.45],
[2.45,    10.00, 4.20e-03, 20.21],
[2.50,    10.00, 4.36e-03, 19.80],
[2.55,    10.00, 4.60e-03, 17.88],
[2.60,    10.00, 4.83e-03, 16.59],
[2.65,    10.00, 4.99e-03, 16.76],
[2.70,    10.00, 5.19e-03, 16.36],
[2.75,    10.00, 5.43e-03, 15.79],
[2.80,    10.00, 5.95e-03, 14.26],
[2.85,    10.00, 6.39e-03, 13.30],
[2.90,    10.00, 6.76e-03, 12.46],
[2.95,    10.00, 7.62e-03, 10.78],
[3.00,     1.00, 8.56e-03, 9.77],
[3.05,     1.00, 9.48e-03, 9.03],
[3.10,     1.00, 1.04e-02, 10.60],
[3.15,     1.00, 1.12e-02, 9.65],
[3.20,     1.00, 1.21e-02, 7.42],
[3.25,     1.00, 1.25e-02, 6.88],
[3.30,     1.00, 1.27e-02, 6.51],
[3.35,     1.00, 1.27e-02, 6.45],
[3.40,     1.00, 1.23e-02, 6.86],
[3.45,     1.00, 1.24e-02, 6.24],
[3.50,     1.00, 1.26e-02, 6.80],
[3.55,     1.00, 1.24e-02, 7.09],
[3.60,     1.00, 1.26e-02, 6.83],
[3.65,     1.00, 1.23e-02, 6.49],
[3.70,     1.00, 1.24e-02, 6.60],
[3.75,     1.00, 1.28e-02, 6.29],
[3.80,     1.00, 1.31e-02, 6.11],
[3.85,     1.00, 1.30e-02, 6.69],
[3.90,     1.00, 1.28e-02, 7.10],
[3.95,     1.00, 1.30e-02, 6.39],
[4.00,     0.10, 1.30e-02, 6.26],
[4.10,     0.10, 1.31e-02, 6.05],
[4.20,     0.10, 1.33e-02, 6.22],
[4.30,     0.10, 1.33e-02, 5.04],
[4.40,     0.10, 1.29e-02, 5.43],
[4.50,     0.10, 1.26e-02, 5.93],
[4.60,     0.10, 1.24e-02, 5.66],
[4.70,     0.10, 1.15e-02, 6.15],
[4.80,     0.10, 1.11e-02, 6.48],
[4.90,     0.10, 8.91e-03, 7.83],
[5.00,     0.10, 8.08e-03, 8.41],
]

m_ctau_eff_time_s_Bc = [
(3.00,     1.00,1.8*1.26e-01-1.87e-01, 0.71),
(3.05,     1.00,1.8*1.32e-01-1.90e-01, 1.33),
(3.10,     1.00,1.8*1.26e-01-1.88e-01, 1.27),
(3.15,     1.00,1.8*1.31e-01-1.87e-01, 1.29),
(3.20,     1.00,1.8*1.19e-01-1.84e-01, 0.73),
(3.25,     1.00,1.8*1.36e-01-1.81e-01, 1.33),
(3.30,     1.00,1.8*1.36e-01-1.80e-01, 0.80),
(3.35,     1.00,1.8*1.30e-01-1.78e-01, 1.23),
(3.40,     1.00,1.8*1.22e-01-1.78e-01, 0.78),
(3.45,     1.00,1.8*1.27e-01-1.71e-01, 0.84),
(3.50,     1.00,1.8*1.21e-01-1.69e-01, 0.86),
(3.55,     1.00,1.8*1.26e-01-1.63e-01, 0.84),
(3.60,     1.00,1.8*1.08e-01-1.66e-01, 0.82),
(3.65,     1.00,1.8*1.12e-01-1.65e-01, 0.84),
(3.70,     1.00,1.8*1.08e-01-1.61e-01, 0.83),
(3.75,     1.00,1.8*1.12e-01-1.56e-01, 0.83),
(3.80,     1.00,1.8*1.04e-01-1.58e-01, 0.83),
(3.85,     1.00,1.8*1.04e-01-1.56e-01, 0.73),
(3.90,     1.00,1.8*1.12e-01-1.53e-01, 0.76),
(3.95,     1.00,1.8*1.18e-01-1.48e-01, 0.79),
(4.00,     0.10,1.8*1.02e-01-1.44e-01, 0.87),
(4.10,     0.10,1.8*1.00e-01-1.40e-01, 0.65),
(4.20,     0.10,1.8*9.58e-02-1.38e-01, 0.90),
(4.30,     0.10,1.8*1.01e-01-1.34e-01, 0.82),
(4.40,     0.10,1.8*9.68e-02-1.34e-01, 0.72),
(4.50,     0.10,1.8*9.98e-02-1.32e-01, 0.77),
(4.60,     0.10,1.8*9.47e-02-1.31e-01, 0.82),
(4.70,     0.10,1.8*9.42e-02-1.32e-01, 0.75),
(4.80,     0.10,1.8*9.45e-02-1.33e-01, 0.77),
(4.90,     0.10,1.8*9.76e-02-1.33e-01, 0.78),
(5.00,     0.10,1.8*9.22e-02-1.38e-01, 0.74),
(5.10,     0.10,1.8*9.79e-02-1.40e-01, 0.65),
(5.20,     0.10,1.8*1.06e-01-1.42e-01, 0.63),
(5.30,     0.10,1.8*9.54e-02-1.44e-01, 0.66),
(5.40,     0.10,1.8*9.35e-02-1.43e-01, 0.71),
(5.50,     0.10,1.8*9.71e-02-1.44e-01, 0.69),
(5.60,     0.10,1.8*9.84e-02-1.42e-01, 0.74),
(5.70,     0.10,1.8*9.07e-02-1.34e-01, 0.79),
(5.80,     0.10,1.8*7.94e-02-1.25e-01, 0.80),
(5.90,     0.10,1.8*7.09e-02-1.03e-01, 0.80),
(6.00,     0.10,1.8*4.57e-02-7.05e-02, 1.14),
(6.10,     0.10,1.8*3.26e-02-4.42e-02, 1.95),
]

m_ctau_eff_time_s_Bu = [
(1.00,    10.00, 2.77e-03, 34.70),
(1.50,    10.00, 2.51e-03, 28.35),
(2.00,    10.00, 2.31e-03, 28.06),
(3.00,    10.00, 7.31e-03, 10.17),
(4.50,     0.10, 1.04e-02, 6.88),
(1.00,  1000.00, 5.07e-04, 148.62),
(1.00,   100.00, 2.17e-03, 34.52),
(1.50,  1000.00, 5.31e-04, 151.16),
(1.50,   100.00, 2.08e-03, 37.98),
(2.00,  1000.00, 5.15e-04, 161.29),
(2.00,   100.00, 1.99e-03, 39.10),
(3.00,  1000.00, 2.50e-03, 35.36),
(3.00,   100.00, 6.88e-03, 11.55),
(3.00,     1.00, 7.27e-03, 11.23),
(4.50,   100.00, 1.02e-02, 8.57),
(4.50,    10.00, 1.06e-02, 8.58),
(4.50,     1.00, 1.04e-02, 7.25),
(1.02,    10.00, 2.77e-03, 29.71),
(1.04,    10.00, 2.74e-03, 27.73),
(1.06,    10.00, 2.73e-03, 28.19),
(1.08,    10.00, 2.64e-03, 29.15),
(1.10,    10.00, 2.62e-03, 34.80),
(1.12,    10.00, 2.61e-03, 32.68),
(1.14,    10.00, 2.57e-03, 29.61),
(1.16,    10.00, 2.59e-03, 32.24),
(1.18,    10.00, 2.59e-03, 32.70),
(1.20,    10.00, 2.62e-03, 27.50),
(1.22,    10.00, 2.63e-03, 26.89),
(1.24,    10.00, 2.59e-03, 32.76),
(1.26,    10.00, 2.59e-03, 29.51),
(1.28,    10.00, 2.56e-03, 29.48),
(1.30,    10.00, 2.56e-03, 28.68),
(1.32,    10.00, 2.62e-03, 28.18),
(1.34,    10.00, 2.59e-03, 26.41),
(1.36,    10.00, 2.52e-03, 29.83),
(1.38,    10.00, 2.54e-03, 33.04),
(1.40,    10.00, 2.61e-03, 32.46),
(1.42,    10.00, 2.55e-03, 28.40),
(1.44,    10.00, 2.49e-03, 27.98),
(1.46,    10.00, 2.54e-03, 27.77),
(1.48,    10.00, 2.54e-03, 29.86),
(1.53,    10.00, 2.54e-03, 30.90),
(1.56,    10.00, 2.56e-03, 27.56),
(1.59,    10.00, 2.49e-03, 31.15),
(1.62,    10.00, 2.44e-03, 30.20),
(1.65,    10.00, 2.37e-03, 28.07),
(1.68,    10.00, 2.38e-03, 30.95),
(1.71,    10.00, 2.42e-03, 31.42),
(1.74,    10.00, 2.36e-03, 31.97),
(1.77,    10.00, 2.38e-03, 34.62),
(1.80,    10.00, 2.38e-03, 32.57),
(1.83,    10.00, 2.31e-03, 33.54),
(1.86,    10.00, 2.33e-03, 30.89),
(1.89,    10.00, 2.34e-03, 32.14),
(1.92,    10.00, 2.31e-03, 34.24),
(1.95,    10.00, 2.32e-03, 32.88),
(1.98,    10.00, 2.33e-03, 31.32),
(2.05,    10.00, 2.32e-03, 30.35),
(2.10,    10.00, 2.38e-03, 30.43),
(2.15,    10.00, 2.36e-03, 32.08),
(2.20,    10.00, 2.34e-03, 35.25),
(2.25,    10.00, 2.40e-03, 37.09),
(2.30,    10.00, 2.47e-03, 31.71),
(2.35,    10.00, 2.55e-03, 26.41),
(2.40,    10.00, 2.59e-03, 29.61),
(2.45,    10.00, 2.67e-03, 29.24),
(2.50,    10.00, 2.76e-03, 29.61),
(2.55,    10.00, 2.96e-03, 25.51),
(2.60,    10.00, 3.08e-03, 23.74),
(2.65,    10.00, 3.31e-03, 21.55),
(2.70,    10.00, 3.56e-03, 18.33),
(2.75,    10.00, 3.88e-03, 18.66),
(2.80,    10.00, 4.18e-03, 17.83),
(2.85,    10.00, 4.78e-03, 15.86),
(2.90,    10.00, 5.54e-03, 13.41),
(2.95,    10.00, 6.46e-03, 11.92),
(3.05,     1.00, 8.47e-03, 9.91),
(3.10,     1.00, 9.65e-03, 7.15),
(3.15,     1.00, 1.05e-02, 6.46),
(3.20,     1.00, 1.07e-02, 5.85),
(3.25,     1.00, 1.10e-02, 5.81),
(3.30,     1.00, 1.12e-02, 5.94),
(3.35,     1.00, 1.12e-02, 7.13),
(3.40,     1.00, 1.12e-02, 6.43),
(3.45,     1.00, 1.10e-02, 7.06),
(3.50,     1.00, 1.09e-02, 6.52),
(3.55,     1.00, 1.09e-02, 7.36),
(3.60,     1.00, 1.09e-02, 8.40),
(3.65,     1.00, 1.09e-02, 7.61),
(3.70,     1.00, 1.07e-02, 6.59),
(3.75,     1.00, 1.05e-02, 6.94),
(3.80,     1.00, 1.07e-02, 7.20),
(3.85,     1.00, 1.09e-02, 7.35),
(3.90,     1.00, 1.07e-02, 6.26),
(3.95,     1.00, 1.07e-02, 7.88),
(4.00,     0.10, 1.06e-02, 7.76),
(4.10,     0.10, 1.08e-02, 6.35),
(4.20,     0.10, 1.09e-02, 6.36),
(4.30,     0.10, 1.07e-02, 6.45),
(4.40,     0.10, 1.08e-02, 6.16),
(4.60,     0.10, 1.05e-02, 6.34),
(4.70,     0.10, 1.06e-02, 6.02),
(3.05,    10.00, 8.57e-03, 7.36),
(3.10,    10.00, 9.56e-03, 6.38),
(3.15,    10.00, 1.03e-02, 6.96),
(3.20,    10.00, 1.07e-02, 6.10),
(3.25,    10.00, 1.11e-02, 5.36),
(3.30,    10.00, 1.11e-02, 5.63),
(3.35,    10.00, 1.10e-02, 5.62),
(3.40,    10.00, 1.12e-02, 6.12),
(3.45,    10.00, 1.11e-02, 7.66),
(3.50,    10.00, 1.08e-02, 8.33),
(3.55,    10.00, 1.10e-02, 6.99),
(3.60,    10.00, 1.09e-02, 5.74),
(3.65,    10.00, 1.09e-02, 6.29),
(3.70,    10.00, 1.07e-02, 6.94),
(3.75,    10.00, 1.05e-02, 6.89),
(3.80,    10.00, 1.07e-02, 6.75),
(3.85,    10.00, 1.09e-02, 4.84),
(3.90,    10.00, 1.08e-02, 5.03),
(3.95,    10.00, 1.07e-02, 6.05),
]

m_ctau_eff_time_s_Bd = [
(1.00,    10.00, 2.81e-03, 23.87),
(1.50,    10.00, 2.42e-03, 25.92),
(2.00,    10.00, 2.15e-03, 31.20),
(3.00,    10.00, 3.29e-03, 21.62),
(4.50,     0.10, 6.16e-03, 12.59),
(1.00,  1000.00, 5.55e-04, 126.18),
(1.00,   100.00, 2.15e-03, 30.00),
(1.50,  1000.00, 5.32e-04, 128.34),
(1.50,   100.00, 2.06e-03, 33.05),
(2.00,  1000.00, 4.77e-04, 148.49),
(2.00,   100.00, 1.84e-03, 35.50),
(3.00,  1000.00, 8.81e-04, 80.51),
(3.00,   100.00, 3.04e-03, 22.29),
(3.00,     1.00, 3.30e-03, 20.14),
(4.50,   100.00, 5.87e-03, 13.27),
(4.50,    10.00, 6.13e-03, 12.05),
(4.50,     1.00, 6.12e-03, 13.55),
(1.02,    10.00, 2.75e-03, 25.68),
(1.04,    10.00, 2.77e-03, 27.12),
(1.06,    10.00, 2.73e-03, 28.27),
(1.08,    10.00, 2.73e-03, 28.63),
(1.10,    10.00, 2.71e-03, 29.22),
(1.12,    10.00, 2.75e-03, 27.27),
(1.14,    10.00, 2.71e-03, 30.96),
(1.16,    10.00, 2.71e-03, 30.92),
(1.18,    10.00, 2.69e-03, 29.97),
(1.20,    10.00, 2.70e-03, 29.33),
(1.22,    10.00, 2.68e-03, 28.75),
(1.24,    10.00, 2.66e-03, 25.98),
(1.26,    10.00, 2.65e-03, 27.76),
(1.28,    10.00, 2.60e-03, 33.10),
(1.30,    10.00, 2.55e-03, 31.65),
(1.32,    10.00, 2.53e-03, 30.58),
(1.34,    10.00, 2.53e-03, 27.97),
(1.36,    10.00, 2.51e-03, 30.36),
(1.38,    10.00, 2.53e-03, 33.32),
(1.40,    10.00, 2.47e-03, 36.92),
(1.42,    10.00, 2.52e-03, 32.73),
(1.44,    10.00, 2.46e-03, 26.85),
(1.46,    10.00, 2.47e-03, 28.60),
(1.48,    10.00, 2.49e-03, 28.41),
(1.53,    10.00, 2.40e-03, 35.45),
(1.56,    10.00, 2.38e-03, 33.49),
(1.59,    10.00, 2.40e-03, 31.77),
(1.62,    10.00, 2.33e-03, 34.40),
(1.65,    10.00, 2.31e-03, 27.90),
(1.68,    10.00, 2.38e-03, 31.50),
(1.71,    10.00, 2.38e-03, 30.36),
(1.74,    10.00, 2.32e-03, 36.06),
(1.77,    10.00, 2.34e-03, 37.22),
(1.80,    10.00, 2.30e-03, 33.76),
(1.83,    10.00, 2.27e-03, 28.84),
(1.86,    10.00, 2.30e-03, 29.30),
(1.89,    10.00, 2.24e-03, 32.27),
(1.92,    10.00, 2.24e-03, 36.45),
(1.95,    10.00, 2.23e-03, 34.52),
(1.98,    10.00, 2.20e-03, 29.68),
(2.05,    10.00, 2.16e-03, 32.12),
(2.10,    10.00, 2.17e-03, 34.02),
(2.15,    10.00, 2.11e-03, 31.71),
(2.20,    10.00, 2.15e-03, 36.78),
(2.25,    10.00, 2.20e-03, 27.35),
(2.30,    10.00, 2.14e-03, 33.83),
(2.35,    10.00, 2.20e-03, 32.23),
(2.40,    10.00, 2.25e-03, 30.36),
(2.45,    10.00, 2.26e-03, 30.22),
(2.50,    10.00, 2.22e-03, 31.66),
(2.55,    10.00, 2.36e-03, 31.47),
(2.60,    10.00, 2.36e-03, 36.15),
(2.65,    10.00, 2.42e-03, 29.72),
(2.70,    10.00, 2.48e-03, 26.22),
(2.75,    10.00, 2.44e-03, 26.93),
(2.80,    10.00, 2.51e-03, 27.70),
(2.85,    10.00, 2.59e-03, 27.17),
(2.90,    10.00, 2.73e-03, 27.13),
(2.95,    10.00, 2.94e-03, 22.71),
(3.05,     1.00, 3.59e-03, 19.12),
(3.10,     1.00, 3.98e-03, 15.98),
(3.15,     1.00, 4.41e-03, 16.39),
(3.20,     1.00, 5.10e-03, 13.56),
(3.25,     1.00, 5.40e-03, 13.72),
(3.30,     1.00, 5.57e-03, 11.55),
(3.35,     1.00, 5.51e-03, 12.10),
(3.40,     1.00, 5.75e-03, 14.08),
(3.45,     1.00, 5.59e-03, 14.92),
(3.50,     1.00, 5.64e-03, 18.90),
(3.55,     1.00, 5.78e-03, 12.85),
(3.60,     1.00, 5.69e-03, 14.53),
(3.65,     1.00, 5.73e-03, 14.81),
(3.70,     1.00, 5.91e-03, 13.48),
(3.75,     1.00, 5.89e-03, 12.17),
(3.80,     1.00, 5.94e-03, 12.91),
(3.85,     1.00, 6.13e-03, 11.35),
(3.90,     1.00, 6.18e-03, 11.47),
(3.95,     1.00, 6.25e-03, 11.23),
(4.00,     0.10, 6.32e-03, 10.98),
(4.10,     0.10, 6.49e-03, 11.04),
(4.20,     0.10, 6.47e-03, 10.55),
(4.30,     0.10, 6.61e-03, 10.68),
(4.40,     0.10, 6.40e-03, 11.23),
(4.60,     0.10, 5.35e-03, 17.07),
(4.70,     0.10, 4.65e-03, 18.13),
(3.05,    10.00, 3.55e-03, 19.87),
(3.10,    10.00, 4.01e-03, 19.07),
(3.15,    10.00, 4.41e-03, 17.01),
(3.20,    10.00, 5.11e-03, 13.86),
(3.25,    10.00, 5.42e-03, 12.98),
(3.30,    10.00, 5.59e-03, 14.11),
(3.35,    10.00, 5.49e-03, 13.04),
(3.40,    10.00, 5.75e-03, 12.68),
(3.45,    10.00, 5.64e-03, 12.16),
(3.50,    10.00, 5.58e-03, 11.87),
(3.55,    10.00, 5.77e-03, 11.80),
(3.60,    10.00, 5.80e-03, 12.49),
(3.65,    10.00, 5.76e-03, 12.17),
(3.70,    10.00, 5.94e-03, 11.61),
(3.75,    10.00, 5.86e-03, 11.50),
(3.80,    10.00, 5.81e-03, 11.79),
(3.85,    10.00, 6.23e-03, 10.95),
(3.90,    10.00, 6.24e-03, 10.43),
(3.95,    10.00, 6.21e-03, 9.78),
]
m_ctau_eff_time_s_Bs = [
(1.00,    10.00, 6.86e-04, 78.78),
(1.50,    10.00, 6.32e-04, 88.36),
(2.00,    10.00, 6.17e-04, 87.66),
(3.00,    10.00, 8.63e-04, 59.97),
(4.50,     0.10, 1.01e-03, 57.44),
(1.00,  1000.00, 1.30e-04, 424.83),
(1.00,   100.00, 5.69e-04, 92.56),
(1.50,  1000.00, 1.32e-04, 408.31),
(1.50,   100.00, 5.35e-04, 93.10),
(2.00,  1000.00, 1.16e-04, 444.19),
(2.00,   100.00, 5.01e-04, 102.86),
(3.00,  1000.00, 2.42e-04, 229.57),
(3.00,   100.00, 8.14e-04, 63.29),
(3.00,     1.00, 8.82e-04, 59.35),
(4.50,   100.00, 1.00e-03, 54.32),
(4.50,    10.00, 1.04e-03, 48.58),
(4.50,     1.00, 1.00e-03, 52.58),
(1.02,    10.00, 6.89e-04, 77.95),
(1.04,    10.00, 6.78e-04, 71.77),
(1.06,    10.00, 6.83e-04, 75.95),
(1.08,    10.00, 6.87e-04, 72.82),
(1.10,    10.00, 7.00e-04, 73.35),
(1.12,    10.00, 6.85e-04, 72.97),
(1.14,    10.00, 6.89e-04, 72.38),
(1.16,    10.00, 7.02e-04, 71.64),
(1.18,    10.00, 6.73e-04, 74.86),
(1.20,    10.00, 6.95e-04, 73.83),
(1.22,    10.00, 6.79e-04, 75.12),
(1.24,    10.00, 6.69e-04, 77.69),
(1.26,    10.00, 6.67e-04, 84.40),
(1.28,    10.00, 6.59e-04, 80.90),
(1.30,    10.00, 6.68e-04, 84.36),
(1.32,    10.00, 6.70e-04, 81.00),
(1.34,    10.00, 6.69e-04, 82.08),
(1.36,    10.00, 6.55e-04, 82.29),
(1.38,    10.00, 6.88e-04, 83.10),
(1.40,    10.00, 6.61e-04, 81.33),
(1.42,    10.00, 6.67e-04, 84.88),
(1.44,    10.00, 6.54e-04, 87.53),
(1.46,    10.00, 6.76e-04, 84.21),
(1.48,    10.00, 6.86e-04, 74.04),
(1.53,    10.00, 6.03e-04, 91.59),
(1.56,    10.00, 6.30e-04, 89.65),
(1.59,    10.00, 6.29e-04, 84.07),
(1.62,    10.00, 6.31e-04, 90.02),
(1.65,    10.00, 5.97e-04, 95.57),
(1.68,    10.00, 5.32e-04, 90.42),
(1.71,    10.00, 6.74e-04, 59.58),
(1.74,    10.00, 6.69e-04, 62.62),
(1.77,    10.00, 8.41e-04, 63.10),
(1.80,    10.00, 6.25e-04, 84.05),
(1.83,    10.00, 5.93e-04, 92.41),
(1.86,    10.00, 5.95e-04, 97.77),
(1.89,    10.00, 5.51e-04, 100.51),
(1.92,    10.00, 5.98e-04, 89.05),
(1.95,    10.00, 5.69e-04, 107.41),
(1.98,    10.00, 5.91e-04, 95.69),
(2.05,    10.00, 5.90e-04, 101.63),
(2.10,    10.00, 5.37e-04, 100.01),
(2.15,    10.00, 5.79e-04, 89.46),
(2.20,    10.00, 5.79e-04, 117.09),
(2.25,    10.00, 5.68e-04, 130.36),
(2.30,    10.00, 5.76e-04, 128.50),
(2.35,    10.00, 6.44e-04, 83.71),
(2.40,    10.00, 5.19e-04, 90.12),
(2.45,    10.00, 5.30e-04, 93.84),
(2.50,    10.00, 5.67e-04, 88.75),
(2.55,    10.00, 7.22e-04, 72.14),
(2.60,    10.00, 5.53e-04, 76.41),
(2.65,    10.00, 5.94e-04, 71.25),
(2.70,    10.00, 7.09e-04, 60.57),
(2.75,    10.00, 6.75e-04, 68.22),
(2.80,    10.00, 7.03e-04, 62.01),
(2.85,    10.00, 5.91e-04, 67.89),
(2.90,    10.00, 7.26e-04, 74.87),
(2.95,    10.00, 8.62e-04, 57.19),
(3.05,     1.00, 8.82e-04, 57.75),
(3.10,     1.00, 1.34e-03, 35.14),
(3.15,     1.00, 1.11e-03, 51.15),
(3.20,     1.00, 1.23e-03, 47.48),
(3.25,     1.00, 1.35e-03, 56.65),
(3.30,     1.00, 1.38e-03, 37.09),
(3.35,     1.00, 1.40e-03, 42.30),
(3.40,     1.00, 1.28e-03, 46.92),
(3.45,     1.00, 1.41e-03, 42.65),
(3.50,     1.00, 1.33e-03, 40.88),
(3.55,     1.00, 1.37e-03, 41.62),
(3.60,     1.00, 1.59e-03, 35.58),
(3.65,     1.00, 1.44e-03, 54.91),
(3.70,     1.00, 1.56e-03, 34.61),
(3.75,     1.00, 1.45e-03, 44.34),
(3.80,     1.00, 1.31e-03, 43.59),
(3.85,     1.00, 1.45e-03, 44.34),
(3.90,     1.00, 1.44e-03, 43.91),
(3.95,     1.00, 1.46e-03, 45.21),
(4.00,     0.10, 1.41e-03, 41.67),
(4.10,     0.10, 1.45e-03, 48.05),
(4.20,     0.10, 1.55e-03, 35.87),
(4.30,     0.10, 1.31e-03, 42.78),
(4.40,     0.10, 1.23e-03, 41.46),
(4.60,     0.10, 9.73e-04, 52.24),
(4.70,     0.10, 6.55e-04, 85.67),
(3.05,    10.00, 9.41e-04, 73.80),
(3.10,    10.00, 1.10e-03, 48.02),
(3.15,    10.00, 1.13e-03, 48.37),
(3.20,    10.00, 1.23e-03, 47.73),
(3.25,    10.00, 1.36e-03, 40.06),
(3.30,    10.00, 1.25e-03, 41.52),
(3.35,    10.00, 1.54e-03, 29.22),
(3.40,    10.00, 1.33e-03, 44.53),
(3.45,    10.00, 1.61e-03, 36.27),
(3.50,    10.00, 1.30e-03, 47.18),
(3.55,    10.00, 1.41e-03, 49.30),
(3.60,    10.00, 1.36e-03, 41.98),
(3.65,    10.00, 1.43e-03, 38.85),
(3.70,    10.00, 1.44e-03, 48.80),
(3.75,    10.00, 1.31e-03, 37.03),
(3.80,    10.00, 1.48e-03, 38.73),
(3.85,    10.00, 1.55e-03, 34.94),
(3.90,    10.00, 1.53e-03, 32.89),
(3.95,    10.00, 1.41e-03, 41.45),
]

def flatMerger(doSamplesMerge):

	samples = glob.glob('../data/HNLFlatTuples/NewSig_flav_4p8_*_a*/')

	print samples
	tag = 'heheheh'
	oldtags = [] 
	if (doSamplesMerge):
		for tag in samples:
		
			used = False
			tag = tag.split('_')
			tag = tag[0]+'_'+tag[1]+'_'+tag[2]+'_'+tag[3]
			for old in oldtags:
		#		print 'oldtags', old,tag	
				if old in tag :
					used = True
				
			if used:
				continue
			haddstring = '' 

			counter = 0 
			for sample in samples: 

#			print(tag)
#			print (sample.strip('_a*'))
				if tag in sample:
			
					print(tag,sample,counter)
					if tag+'_' in sample:
						haddstring = haddstring +' '+ sample+'/HNLFlat_0.root'
					counter = counter + 1
					print counter	
			

				#os.system('mkdir '+tag)
			if (counter>1):
				os.system('rm '+tag+'/HNLFlat_0.root')
		#	 	print('rm '+tag+'/HNLFlat_0.root')
		#	 	print('mkdir '+tag)
		#	 	print('hadd -f '+tag+'/HNLFlat_0.root '+ haddstring)
				os.system('mkdir '+tag)
				os.system('hadd -f '+tag+'/HNLFlat_0.root '+ haddstring)
		#	print('\n')
			oldtags.append(tag)
	
				#os.system('hadd '+tag+'/HNLFlat_0.root '+ haddstring)	
		
	out = []
	
	oldtags = [] 
	with open('MuEeventsXflavor.txt') as flavFile:
		n_flav = flavFile.readlines()		

		tag = ''
		for tag in n_flav:
			counters = [0,0,0]
#			print tag
			used = False
			for old in oldtags:
			#	print 'oldtags', old,tag	
				if old in tag :
					used = True
			
			if used:
				continue
			tag = tag.split(' ')
			tag = tag[0].split('_')
#			print tag
			tag = tag[0]+'_'+tag[1]
			for old in oldtags:
				if tag == old :
					continue
			for n in n_flav:

				n = n.split(' ')
			#	print 'N________',n
				if tag in n[0]:
#					print(n[1],n[2],n[3])
#			
					counters[0] = counters[0]+float(n[1])	
					counters[1] = counters[1]+float(n[2])	
					counters[2] = counters[2]+float(n[3])
				
			out.append([tag,counters])

			oldtags.append(tag)
	return out

if __name__ == "__main__":

	newNorm = True
	doSamplesMerge = True
	nFlav = []
	
#	print len(m_ctau_eff_time_s_Bu),len(m_ctau_eff_time_s_Bd),len(m_ctau_eff_time_s_Bs)
	if newNorm:
		nFlav =	flatMerger(doSamplesMerge)
#	print nFlav	
#		with open() as flavFile:
#		n_flav = flavFile.readlines()
#		n_flav = n_flav.split(' ')


 	gROOT.LoadMacro('/cmshome/ratramon/Analysis/macros/AllFits.C')
 	masses = []
 	Bc = False	
 	oldtags = []	
 	nanos = glob.glob('/pnfs/roma1.infn.it/data/cms/store/user/ratramon/HNLGen_ntuples/private_B_mass4p8_*/BuToHNLToLPi_2023Aug*/*/0000/')
#	print nanos
 	out = '../data/MC_private_Aug10_V42.csv'
 	if Bc:
 		nanos = glob.glob('/pnfs/roma1.infn.it/data/cms/store/user/ratramon/HNLGen_ntuples/private_B_Bc_mass3p2*/BuToHNLToLPi_2023Aug11/*/0000/')
 		out = '../data/MC_private_Bc.csv'
 	with open(out,'a') as out:
 		for nano in nanos:
 			print nano
 			sig_tag = (nano.split('/'))[9]
 			sig_tag = sig_tag.split('_')
 #			print sig_tag
 			mass = float(sig_tag[2].strip('mass').replace('p','.'))
 			ctau = float(sig_tag[3].strip('ctau').replace('p','.'))
 	
 #			print mass, ctau
 			iterator = m_ctau_eff_time_s_Bu
 
 			if Bc:
 				iterator = m_ctau_eff_time_s_Bc
 			for idx,sig in enumerate(iterator):
 				if sig[0] == mass and sig[1]==ctau:
 					filter_eff = sig[2]
					if not newNorm:
 						GenEvents= ROOT.genEventCount(nano+"*.root")
 					s_tag = sig_tag[2].strip('mass')+'_'+sig_tag[3]
 					flatPath ='/cmshome/ratramon/Analysis/data/HNLFlatTuples/NewSig_private_'+s_tag+'/HNLFlat_0.root' 
					print s_tag
					used = False
					for old in oldtags:
					#	print 'oldtags', old,s_tag	
						if old in s_tag :
							used = True
			
					if used:
						continue
 	#				masses.append(mass)
 				#	print('dummy {} {} {} {} {:.5E} {} {} {} {}\n'.format(s_tag,mass,ctau,nano.strip('/pnfs/roma1.infn.it/data/cms/store/user/ratramon/HNLGen_ntuples/'),GenEvents,filter_eff,0.02,0.5,flatPath))
 					if Bc or not newNorm: 
 						out.write('dummy {} {} {} {} {:.5E} {:.5E} {:.5E} {:.5E} {} {} {} {} {} {} {}\n'.format(s_tag,mass,ctau,nano.strip('/pnfs/roma1.infn.it/data/cms/store/user/ratramon/HNLGen_ntuples/'),-1,-1,-1,GenEvents,0,0,0,filter_eff,0.02,0.5,flatPath))
 					else:
						Bu = -1 
						Bd = -1 
						Bs = -1 
 						for line in nFlav:
						#	print line
							tag = line[0].split('_')
		#					print line[1][0]
 							mass_n = float(tag[0].strip('mass').replace('p','.'))
 							ctau_n = float(tag[1].strip('ctau').replace('p','.'))
 					#		print mass_n, ctau_n
 							if mass_n == mass and ctau_n == ctau:
 								Bu = float(line[1][0])
 								Bd = float(line[1][1])
 								Bs = float(line[1][2])
								print Bu,Bd,Bs
								break
						if Bu ==-1:
							continue
 						filter_eff_Bu = float(m_ctau_eff_time_s_Bu[idx][2])
 						filter_eff_Bd = float(m_ctau_eff_time_s_Bd[idx][2])
						filter_eff_Bs =-1 
						for Bs_eff in m_ctau_eff_time_s_Bs:
							if Bs_eff[0] == mass and Bs_eff[1] == ctau:
 								filter_eff_Bs = float(Bs_eff[2])
						if filter_eff_Bs ==-1:
							continue
 						filter_eff= -1  
						for B_eff in m_ctau_eff_time_s:
							if B_eff[0] == mass and B_eff[1] == ctau:
 								filter_eff = float(B_eff[2])
 					#	print GenEvents
						
 						print('dummy {} {} {} {} {:.5E} {:.5E} {:.5E} {:.5E} {} {} {} {} {} {} {}\n'.format(s_tag,mass,ctau,nano.strip('/pnfs/roma1.infn.it/data/cms/store/user/ratramon/HNLGen_ntuples/'),Bu,Bd,Bs,Bu+Bd+Bs,filter_eff_Bu, filter_eff_Bd,filter_eff_Bs,filter_eff,0.02,0.5,flatPath))
 						out.write('dummy {} {} {} {} {:.5E} {:.5E} {:.5E} {:.5E} {} {} {} {} {} {} {}\n'.format(s_tag,mass,ctau,nano.strip('/pnfs/roma1.infn.it/data/cms/store/user/ratramon/HNLGen_ntuples/'),Bu,Bd,Bs,Bu+Bd+Bs,filter_eff_Bu, filter_eff_Bd,filter_eff_Bs,filter_eff,0.02,1,flatPath))

 						oldtags.append(s_tag)

